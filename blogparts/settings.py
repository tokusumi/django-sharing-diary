"""
Django settings for blogparts project.

Generated by 'django-admin startproject' using Django 2.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "")

# SECURITY WARNING: don't run with debug turned on in production!


domain = os.getenv("BASE_DOMAIN", "0.0.0.0")


if "0.0.0.0" in domain:
    # デバッグ環境
    DEBUG = True
    BASE_URL = "http://{}".format(domain)
    DATABASES = {
        'default': {
            'ENGINE': 'django.contrib.gis.db.backends.postgis',  # postgis
            'NAME': 'example',
            'USER': 'username',
            'PASSWORD': 'pwd00000',
            'HOST': '',
            'PORT': '',
        }}
    ALLOWED_HOSTS = ['*']

else:
    # 本番環境
    DEBUG = False
    BASE_URL = "https://{}".format(domain)
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
            },
        },
        'loggers': {
            'django': {
                'handlers': ['console'],
                'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
            },
        },
    }

    # DB設定
    import dj_database_url
    DATABASES = {'default': dj_database_url.config(conn_max_age=500)}
    DATABASES['default']['ENGINE'] = 'django.contrib.gis.db.backends.postgis'
    GEOS_LIBRARY_PATH = "{}/libgeos_c.so".format(os.environ.get('GEOS_LIBRARY_PATH'))
    GDAL_LIBRARY_PATH = "{}/libgdal.so".format(os.environ.get('GDAL_LIBRARY_PATH'))
    PROJ4_LIBRARY_PATH = "{}/libproj.so".format(os.environ.get('PROJ4_LIBRARY_PATH'))
    ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bootstrap4',
    'widget_tweaks',
    'imagekit',
    'ckeditor',  # add richtext
    'ckeditor_uploader',  # add richtext with image
    'blogs.apps.BlogsConfig',
    'accounts.apps.AccountsConfig',
    'home.apps.HomeConfig',
    'webmapping.apps.WebmappingConfig',
    'leaflet',
    'django.contrib.gis',  # postgis
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'blogparts.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # 'blogs.templates.blogs.context_processors.recent', #for sort
            ],
        },
    },
]

WSGI_APPLICATION = 'blogparts.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'
# TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

# # STATIC_URL = '/static/'
# # STATIC_ROOT = os.path.join(BASE_DIR, 'static')
# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# S3の共通の設定
INSTALLED_APPS += ('storages',
                   'collectfast',
                   )
AWS_QUERYSTRING_AUTH = False  # for ckeditor
AWS_REGION = os.environ.get('AWS_REGION', '')  # e.g. eu-west-1
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY', '')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_KEY', '')
AWS_STORAGE_BUCKET_NAME = os.environ.get('S3_BUCKET', '')
AWS_S3_CALLING_FORMAT = "boto.s3.connection.OrdinaryCallingFormat"
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',  # 1日はそのキャッシュを使う
}

if AWS_STORAGE_BUCKET_NAME:
    STATIC_URL = 'https://s3.%s.amazonaws.com/%s/static/' % (AWS_REGION, AWS_STORAGE_BUCKET_NAME)
    MEDIA_URL = 'https://s3.%s.amazonaws.com/%s/media/' % (AWS_REGION, AWS_STORAGE_BUCKET_NAME)
    STATICFILES_STORAGE = 'blogparts.customstorages.StaticStorage'
    DEFAULT_FILE_STORAGE = 'blogparts.customstorages.MediaStorage'
    STATICFILES_LOCATION = 'static'  # name of folder within bucket
    MEDIAFILES_LOCATION = 'media'    # name of folder within bucket
else:
    STATIC_URL = '/static/'
    MEDIA_URL = '/media/'

MEDIA_URL = os.environ.get('MEDIA_URL', MEDIA_URL)
STATIC_URL = os.environ.get('STATIC_URL', STATIC_URL)

# #CollectfastのChache設定
AWS_PRELOAD_METADATA = True
COLLECTFAST_THREADS = 20


def get_static_memcache():
    # For python 2.7, just 'import urlparse'
    from urllib.parse import urlparse

    if os.environ.get('REDIS_URL', ''):
        redis_url = urlparse(os.environ.get('REDIS_URL'))
        return {
            "BACKEND": "redis_cache.RedisCache",
            'TIMEOUT': 90,
            "LOCATION": "{0}:{1}".format(redis_url.hostname, redis_url.port),
            "OPTIONS": {
                "PASSWORD": redis_url.password,
                "DB": 0,
            }
        }
    return {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'TIMEOUT': 90,
        'OPTIONS': {
            'MAX_ENTRIES': 10000
        }
    }

# herokuでのmemchacher設定


def get_cache():
    try:
        servers = os.environ['MEMCACHIER_SERVERS']
        username = os.environ['MEMCACHIER_USERNAME']
        password = os.environ['MEMCACHIER_PASSWORD']
        return {
            'default': {
                'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',
                # TIMEOUT is not the connection timeout! It's the default expiration
                # timeout that should be applied to keys! Setting it to `None`
                # disables expiration.
                'TIMEOUT': 24 * 3600,
                'LOCATION': servers,
                'OPTIONS': {
                    'binary': True,
                    'username': username,
                    'password': password,
                    'behaviors': {
                        # Enable faster IO
                        'no_block': True,
                        'tcp_nodelay': True,
                        # Keep connection alive
                        'tcp_keepalive': True,
                        # Timeout settings
                        'connect_timeout': 2000,  # ms
                        'send_timeout': 750 * 1000,  # us
                        'receive_timeout': 750 * 1000,  # us
                        '_poll_timeout': 2000,  # ms
                        # Better failover
                        'ketama': True,
                        'remove_failed': 1,
                        'retry_timeout': 2,
                        'dead_timeout': 30,
                    }
                }
            },
            'collectfast': get_static_memcache(),
        }
    except:
        return {
            'default': {
                'BACKEND': 'django.core.cache.backends.locmem.LocMemCache'
            },
            'collectfast': get_static_memcache(),
        }


CACHES = get_cache()
COLLECTFAST_CACHE = 'collectfast'


# LOGIN_URL='/accounts/login'
# LOGIN_REDIRECT_URL='/accounts/'
# LOGOUT_REDIRECT_URL='/accounts/login'
# AUTH_PROFILE_MODULE = "account.Profile"# https://www.turnkeylinux.org/blog/django-profile
LOGIN_REDIRECT_URL = '/'  # ログイン後のurl

# Custom User Model
AUTH_USER_MODEL = 'accounts.MyUser'

CRISPY_TEMPLATE_PACK = 'bootstrap4'

# #ckeditor setup
# CKEDITOR_BASEPATH = "/static/ckeditor/ckeditor"
# CKEDITOR_JQUERY_URL = 'https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js'
# should set percentage when you size image size
CKEDITOR_UPLOAD_PATH = "uploads/"
CKEDITOR_IMAGE_BACKEND = "pillow"
# CKEDITOR_ALLOW_NONIMAGE_FILES = False
CKEDITOR_BROWSE_SHOW_DIRS = True
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar_Custom': [
            {'name': 'document', 'items': ['Source', ]},
            {'name': 'clipboard', 'items': ['Cut', 'Copy', 'Paste', 'PasteText', '-', 'Undo', 'Redo']},
            {'name': 'editing', 'items': ['Find', 'Replace', '-', 'SelectAll']},
            {'name': 'paragraphstyle', 'items': ['JustifyLeft', 'JustifyCenter',
                                                 'JustifyRight', 'JustifyBlock', '-', 'BidiLtr', 'BidiRtl', 'Language']},
            '/',  # put this to force next toolbar on new line
            {'name': 'basicstyles',
             'items': ['Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript', '-', 'RemoveFormat']},
            {'name': 'paragraph',
             'items': ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'Blockquote', '-', ]},
            {'name': 'links', 'items': ['Link', 'Unlink', 'Anchor']},
            {'name': 'insert',
             'items': ['Image', 'Table', 'HorizontalRule', 'Smiley', 'SpecialChar', ]},
            '/',
            {'name': 'styles', 'items': ['Styles', 'Format', 'Font', 'FontSize']},
            {'name': 'colors', 'items': ['TextColor', 'BGColor']},
            {'name': 'tools', 'items': ['Maximize', 'ShowBlocks']},
            {'name': 'yourcustomtools', 'items': ['Preview', ]},
            '/',
        ],
        'toolbar': 'Custom',
        'height': "500px",
        'width': "100%",
        'toolbarLocation': 'bottom',
        'enterMode': 2,
        'shiftEnterMode': 'CKEDITOR.ENTER_P',
    },
}

# cf. https://docs.djangoproject.com/ja/1.10/ref/settings/
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get("EMAIL_BY", "")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD", "")

# leaflet setting
LEAFLET_CONFIG = {
    'DEFAULT_CENTER': (35.1708, 136.882021),
    'DEFAULT_ZOOM': 7,
    'MIN_ZOOM': 4,
    'MAX_ZOOM': 18,
    'doubleClickZoom': False,
    'touchZoom': False,
    'RESET_VIEW': False,
    'TILES': [
        ('Esri_WorldStreetMap', 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}', {
            # 'attribution': 'Tiles &copy; Esri &mdash; Source': 'Esri',' DeLorme',' NAVTEQ',' USGS',' Intermap',' iPC',' NRCAN',' Esri Japan',' METI',' Esri China (Hong Kong)',' Esri (Thailand)',' TomTom', 2012
        }),
        ('CartoDB_Positron', 'https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png', {'subdomains': 'abcd', 'maxZoom': 19
                                                                                                              # 'attribution': '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> &copy; <a href="http://cartodb.com/attributions">CartoDB</a>','subdomains': 'abcd','maxZoom': 19,
                                                                                                              }),
        ('Wikimedia', 'https://maps.wikimedia.org/osm-intl/{z}/{x}/{y}.png', {
            # 	attribution: '<a href="https://wikimediafoundation.org/wiki/Maps_Terms_of_Use">Wikimedia</a>',
            'minZoom': 1,
            'maxZoom': 18
        }),
    ]
}

# demo user Name
DEMO_USER = "Demo"
EMAIL_BY = os.environ.get("EMAIL_BY", "")
EMAIL_TO = tuple([f.strip() for f in os.environ.get("EMAIL_TO", "").split(",") if f])
